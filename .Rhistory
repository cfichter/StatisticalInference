error <-sqrt(sum((rt-r_sol)^2))
error
}
r_sol
sqrt(sum((rt-r_sol)^2))
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
for (i in 1:100) {
rt <- M%*%r_sol
r_sol<-rt
error <- sqrt(sum((rt-r_sol)^2))
print(error)
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
for (i in 1:100) {
rt <- M%*%r_sol
r_sol<-rt
error <- sqrt(sum((rt-r_sol)^2))
print(i,error)
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
for (i in 1:100) {
rt <- M%*%r_sol
r_sol<-rt
error <- sqrt(sum((rt-r_sol)^2))
print(x = error,digits = 10)
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
for (i in 1:100) {
rt <- M%*%r_sol
r_sol<-rt
error <- sqrt(sum((rt-r_sol)^2))
print(x = rt-r_sol,digits = 10)
}
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if error < epsilon break
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if error < epsilon {break}
else
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if error < epsilon {break}
else
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if error < epsilon {break}
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
?if
??if
help("if")
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if (error < epsilon) break
print(x = error,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if (error < epsilon) break
m <- cat(i, ": ", error, "\n", sep = "")
print(x = m,digits = 10)
r_sol<-rt
}
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if (error < epsilon) break
m <- cat(i, ": ", error)
print(x = m,digits = 10)
r_sol<-rt
}
r_sol
M = matrix(c(0,0,1,0.5,0,0,0.5,1,0),3,3)
M = t(M)
r_sol <- matrix(c(1,1,1),3,1)
epsilon = 0.0000000001
for (i in 1:100) {
rt <- M%*%r_sol
error <- sqrt(sum((rt-r_sol)^2))
if (error < epsilon) break
m <- cat(i, ": ", error, sep= "")
print(x = m,digits = 10)
r_sol<-rt
}
r_sol
choose(10,9)*.5^9*(.5^1)+choose(10,10)*.5^10*(.5^0)
pbinom(9,size=10,prob=.5,lowwr.tail=FALSE)
pbinom(9,size=10,prob=.5,lower.tail=FALSE)
pbinom(8,size=10,prob=.5,lowwr.tail=FALSE)
pbinom(8,size=10,prob=.5,lower.tail=FALSE)
choose(10,9)*.5^9*(.5^1)+choose(10,10)*.5^10*(.5^0)
help(pbinom)
ppois(q = 40,lambda = 9*5)
x <- father.son$fheight; mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
library(UsingR)
library(UsingR)
install.packages("UsingR")
data(father.son)
library(UsingR)
data(father.son)
str(father.son)
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
x <- father.son$fheight
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
rnorm(10000)
pnorm(.95)
pnorm(q = .95,mean = 1100,sd = 75,lower.tail = FALSE)
pnorm(q = .95,mean = 1100,sd = 75)
qnorm(q = .95,mean = 1100,sd = 75)
qnorm(95,mean = 1100,sd = 75)
qnorm(p = .05,mean = 1100,sd = 75)
qnorm(p = .05,mean = 1100,sd = 75)
1-qnorm(95,mean = 1100,sd = 75)
1-norm(95,mean = 1100,sd = 75)
1-qorm(95,mean = 1100,sd = 75)
1-qnorm(95,mean = 1100,sd = 75)
1100+75*1.645
1100+75*1.645/100
1100+7.5*1.645
choose(5,4)*.5^4*.5+choose(5,5)*.5^5*1
pbinom(3,5,prob = .5,lower.tail = FALSE)
sqrt(1/12)/1000
sqrt(1/12)/100
nosim <- 1000
n <- 100
m <- matrix(rnorm(nosim*n),nosim)
sd(apply(m,,mean))
sd(apply(m, ,mean))
sd(apply(m,n ,mean))
sd(apply(m,1,mean))
uniform
uni
u
un
help(uniform)
??(uniform)
??("uniform")
m <- matrix(runif(nosim*n),nosim)
sd(apply(m,1,mean))
sd(apply(m,1,mean))
ppois(10,lambda = 5*3)
nosim <- 1000
n <- 100
m <- matrix(runif(nosim*n),nosim)
sd(apply(m,1,mean))
ppois(10,lambda = 5*3)
nosim <- 1000
n <- 100
m <- matrix(runif(nosim*n),nosim)
mean(apply(m,1,mean))
choose(5,4)*.5^4*.5+choose(5,5)*.5^5*1
nosim <- 1000
n <- 100
m <- matrix(runif(nosim*n),nosim)
mean(apply(m,1,mean))
nosim <- 1000
n <- 100
m <- matrix(runif(nosim*n),nosim)
sd(apply(m,1,mean))
ppois(10,lambda = 5*3)
sqrt(54^2+8^2)
sqrt(50^2+18^2)
sqrt(56^2+13^2)
sqrt(55^2+5^2)
sqrt(44^2+32^2)
sqrt(44^2+27^2)
sqrt(44^2+27^2)
sqrt(46^2+32^2)
help("Sys")
??setlocale
library(Rutils)
library(R.utils)
install.packages("R.utils")
library(R.utils)
??setlocale
??Sys
??Sys.setlocale
Sys.getlocale()
pnorm(q = 9,mean = 1100,sd = 30)
??pnorm
help("pnorm")
rnorm(9,mean=1100,sd=30)
seed(1)
set.seed(1)
x <- rnorm(9,mean=1100,sd=30)
t.test(x = x,mu = 1100)
help("t,test")
help("t.test")
t.test(c(1:9),mu = 1100)
y <- c(1:9)
t.test(x,mu = 1100)
t.test(x)$conf.int
t.test((c(1:9))$conf.int
t.test(c(1:9))$conf.int
x <- rnorm(9,mean=1100,sd=30)
t.test(x)$conf.int
x <- rnorm(9,mean=1100,sd=30)
t.test(x)$conf.int
set.seed(0)
x <- rnorm(9,mean=1100,sd=30)
t.test(x)$conf.int
t.test(x,mu = 1100)
t.test(x)
t.test(x)$conf.int
qt(.975,8)
-2+(2.306004)/3
2-(2.306004)/3
x_bar <- 1100
s <- 30
n <- 9
alpha <- 0.05
ts<-qt(1-alpha,n-1)
ts
ts<-qt(1-alpha/2,n-1)
ts
round(x_bar + c(-1, 1) * ts * s / sqrt(n)
)
ts<-qt(1-alpha/2,n-1)
ts
-x_bar * sqrt(n) / ts
x_bar <- -2
n <- 9
alpha <- 0.05
ts <- qt(1 - alpha / 2, n - 1) # 2.306004
s <- -x_bar*sqrt(n) / ts
s # 2.601903
n1 <-
10
n2 <- 10
x1_bar =
3
v1 <- .6
x2_bar <- 5
v2 <- .68
alpha <- .05
ts <- qt((1-alpha)/2,n1+n2-2)
t
ts
sp <- sqrt((n1-1)*v1+(n2-1)*v2)/(n1+n2-2)
x1_bar-x2_bar + c(-1,1)*ts*sp*sqrt(1/10+1/10)
n1 <-
10
n2 <- 10
x1 <-3
v1 <- 06
v1 <- 0.6
x2 <-5
v2 <- .68
alpha = .05
sp <- sqrt(((n1-1)*v1+(n2-1)*v2)/(n1+n2-2))
x1_bar-x2_bar + c(-1,1)*ts*sp*sqrt(1/10+1/10)
ts
sp
n_x <- 10
n_y <- 10
x_bar <- 5 # old_system
y_bar <- 3 # new_system
var_x <- 0.6
var_y <- 0.68
alpha <- 0.05
sp_2 <- ((n_x - 1)*var_x + (n_y - 1)*var_y) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
sp
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
ts
round((y_bar - x_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 2)
help("z")
help("z.test")
x_old <- 6
s_old <- 2
x_new <- 4
s_new <- .5
n1 <- 100
n2 <- 100
alpha <- .05
ts <- qt(p = 1-(alpha/2),df= (n1+n2-2))
ts
x_old - x_new + c(-1,1) * ts * sp * sqrt(1/n1+1/n2)
sp_2 <- ((n1 - 1)*s_old^2 + (n2 - 1)*s_new^2) / (n1 + n2 - 2)
sp <- sqrt(sp_2)
x_old - x_new + c(-1,1) * ts * sp * sqrt(1/n1+1/n2)
n1 <-9
n2 <-9
x1<--3
x2 <-1
s1<-1.5
s2 <- 1.8
alpha <- .05
qt(1-alpha/2,n1+n2-2)
sp2 <- ((n1-1)*s1^2+(n2-1)*s2^2)/(n1+n2-2)
sp <- sqrt(sp2)
sp
x1-x2
x1-x2 + c(-1,1) * ts * sp * (1/n1+1/n2)^.5
ts <- qt(p = 1-alpha/2,n1+n2-2)
x1-x2 + c(-1,1) * ts * sp * (1/n1+1/n2)^.5
round(x1-x2 + c(-1,1) * ts * sp * (1/n1+1/n2)^.5)
round(x1-x2 + c(-1,1) * ts * sp * (1/n1+1/n2)^.5,2)
alpha =.1
ts <- qt(p = 1-alpha/2,n1+n2-2)
round(x1-x2 + c(-1,1) * ts * sp * (1/n1+1/n2)^.5,2)
t
qt(1-0.05,9-1)
qt(1-0.05/2,9-1)
data(sleep)
head(sleep)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
??manipulate
help("manipulate")
library(grDevices)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(ggplot)
library(gplot)
library(gplot2)
library(ggplot2)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(datasets); data(ChickWeight); library(reshape2)
head(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
table(ChickWeight)
data(sleep)
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
g
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
#Load and Know data
data(ToothGrowth)
summary(ToothGrowth)
var(ToothGrowth)
var(ToothGrowth$len)
var(ToothGrowth[ToothGrowth$supp == "OJ",]$len)
var(ToothGrowth[ToothGrowth$supp == "VC",]$len)
var(ToothGrowth[ToothGrowth$dose == "0.5",]$len)
var(ToothGrowth[ToothGrowth$dose == "1",]$len)
var(ToothGrowth[ToothGrowth$dose == "2",]$len)
setwd("C:/Documents and Settings/Administrador/StatisticalInference")
# Set working directory
setwd("C:/Documents and Settings/Administrador/StatisticalInference")
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("PA_part_1.Rmd")
markdownToHTML('PA_part_1.md', 'PA_part_1.html', options=c("use_xhml"))
system("pandoc -s PA_part_1.html -o PA_part_1.pdf")
knit("PA_part_2.Rmd")
markdownToHTML('PA_part_2.md', 'PA_part_2.html', options=c("use_xhml"))
system("pandoc -s PA_part_2.html -o PA_part_2.pdf")
dir()
# Set working directory
setwd("C:/Documents and Settings/Administrador/StatisticalInference")
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("PA_part_1.Rmd")
markdownToHTML('PA_part_1.md', 'PA_part_1.html', options=c("use_xhml"))
system("pandoc -s PA_part_1.html -o PA_part_1.pdf")
knit("PA_part_2.Rmd")
markdownToHTML('PA_part_2.md', 'PA_part_2.html', options=c("use_xhml"))
system("pandoc -s PA_part_2.html -o PA_part_2.pdf")
# Set working directory
setwd("C:/Documents and Settings/Administrador/StatisticalInference")
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("PA_part_1.Rmd")
markdownToHTML('PA_part_1.md', 'PA_part_1.html', options=c("use_xhml"))
system("pandoc -s PA_part_1.html -o PA_part_1.pdf")
knit("PA_part_2.Rmd")
markdownToHTML('PA_part_2.md', 'PA_part_2.html', options=c("use_xhml"))
system("pandoc -s PA_part_2.html -o PA_part_2.pdf")
knit("prueba_pandoc.Rmd")
markdownToHTML('prueba_pandoc.md', 'prueba_pandoc.html', options=c
# Set working directory
setwd("C:/Documents and Settings/Administrador/StatisticalInference")
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("PA_part_1.Rmd")
markdownToHTML('PA_part_1.md', 'PA_part_1.html', options=c("use_xhml"))
system("pandoc -s PA_part_1.html -o PA_part_1.pdf")
knit("PA_part_2.Rmd")
markdownToHTML('PA_part_2.md', 'PA_part_2.html', options=c("use_xhml"))
system("pandoc -s PA_part_2.html -o PA_part_2.pdf")
knit("prueba_pandoc.Rmd")
markdownToHTML('prueba_pandoc.md', 'prueba_pandoc.html', options=c("use_xhml"))
system("pandoc -s prueba_pandoc.html -o prueba_pandoc.pdf")
opts_chunk$get()
